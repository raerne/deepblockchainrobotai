# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.bounds import Bounds  # noqa: F401,E501
from swagger_server.models.effect_grid import EffectGrid  # noqa: F401,E501
from swagger_server.models.robot import Robot  # noqa: F401,E501
from swagger_server.models.terrain_grid import TerrainGrid  # noqa: F401,E501
from swagger_server import util


class Arena(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active_player: int=None, bounds: Bounds=None, terrain: TerrainGrid=None, effects: EffectGrid=None, robots: List[Robot]=None):  # noqa: E501
        """Arena - a model defined in Swagger

        :param active_player: The active_player of this Arena.  # noqa: E501
        :type active_player: int
        :param bounds: The bounds of this Arena.  # noqa: E501
        :type bounds: Bounds
        :param terrain: The terrain of this Arena.  # noqa: E501
        :type terrain: TerrainGrid
        :param effects: The effects of this Arena.  # noqa: E501
        :type effects: EffectGrid
        :param robots: The robots of this Arena.  # noqa: E501
        :type robots: List[Robot]
        """
        self.swagger_types = {
            'active_player': int,
            'bounds': Bounds,
            'terrain': TerrainGrid,
            'effects': EffectGrid,
            'robots': List[Robot]
        }

        self.attribute_map = {
            'active_player': 'activePlayer',
            'bounds': 'bounds',
            'terrain': 'terrain',
            'effects': 'effects',
            'robots': 'robots'
        }
        self._active_player = active_player
        self._bounds = bounds
        self._terrain = terrain
        self._effects = effects
        self._robots = robots

    @classmethod
    def from_dict(cls, dikt) -> 'Arena':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Arena of this Arena.  # noqa: E501
        :rtype: Arena
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_player(self) -> int:
        """Gets the active_player of this Arena.


        :return: The active_player of this Arena.
        :rtype: int
        """
        return self._active_player

    @active_player.setter
    def active_player(self, active_player: int):
        """Sets the active_player of this Arena.


        :param active_player: The active_player of this Arena.
        :type active_player: int
        """

        self._active_player = active_player

    @property
    def bounds(self) -> Bounds:
        """Gets the bounds of this Arena.


        :return: The bounds of this Arena.
        :rtype: Bounds
        """
        return self._bounds

    @bounds.setter
    def bounds(self, bounds: Bounds):
        """Sets the bounds of this Arena.


        :param bounds: The bounds of this Arena.
        :type bounds: Bounds
        """

        self._bounds = bounds

    @property
    def terrain(self) -> TerrainGrid:
        """Gets the terrain of this Arena.


        :return: The terrain of this Arena.
        :rtype: TerrainGrid
        """
        return self._terrain

    @terrain.setter
    def terrain(self, terrain: TerrainGrid):
        """Sets the terrain of this Arena.


        :param terrain: The terrain of this Arena.
        :type terrain: TerrainGrid
        """

        self._terrain = terrain

    @property
    def effects(self) -> EffectGrid:
        """Gets the effects of this Arena.


        :return: The effects of this Arena.
        :rtype: EffectGrid
        """
        return self._effects

    @effects.setter
    def effects(self, effects: EffectGrid):
        """Sets the effects of this Arena.


        :param effects: The effects of this Arena.
        :type effects: EffectGrid
        """

        self._effects = effects

    @property
    def robots(self) -> List[Robot]:
        """Gets the robots of this Arena.


        :return: The robots of this Arena.
        :rtype: List[Robot]
        """
        return self._robots

    @robots.setter
    def robots(self, robots: List[Robot]):
        """Sets the robots of this Arena.


        :param robots: The robots of this Arena.
        :type robots: List[Robot]
        """

        self._robots = robots
