# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.arena import Arena  # noqa: F401,E501
from swagger_server.models.competitor import Competitor  # noqa: F401,E501
from swagger_server import util


class MoveRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, request_uuid: str=None, bout_uuid: str=None, arena: Arena=None, player_competitor_map: Dict[str, Competitor]=None):  # noqa: E501
        """MoveRequest - a model defined in Swagger

        :param request_uuid: The request_uuid of this MoveRequest.  # noqa: E501
        :type request_uuid: str
        :param bout_uuid: The bout_uuid of this MoveRequest.  # noqa: E501
        :type bout_uuid: str
        :param arena: The arena of this MoveRequest.  # noqa: E501
        :type arena: Arena
        :param player_competitor_map: The player_competitor_map of this MoveRequest.  # noqa: E501
        :type player_competitor_map: Dict[str, Competitor]
        """
        self.swagger_types = {
            'request_uuid': str,
            'bout_uuid': str,
            'arena': Arena,
            'player_competitor_map': Dict[str, Competitor]
        }

        self.attribute_map = {
            'request_uuid': 'requestUuid',
            'bout_uuid': 'boutUuid',
            'arena': 'arena',
            'player_competitor_map': 'playerCompetitorMap'
        }
        self._request_uuid = request_uuid
        self._bout_uuid = bout_uuid
        self._arena = arena
        self._player_competitor_map = player_competitor_map

    @classmethod
    def from_dict(cls, dikt) -> 'MoveRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MoveRequest of this MoveRequest.  # noqa: E501
        :rtype: MoveRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_uuid(self) -> str:
        """Gets the request_uuid of this MoveRequest.


        :return: The request_uuid of this MoveRequest.
        :rtype: str
        """
        return self._request_uuid

    @request_uuid.setter
    def request_uuid(self, request_uuid: str):
        """Sets the request_uuid of this MoveRequest.


        :param request_uuid: The request_uuid of this MoveRequest.
        :type request_uuid: str
        """

        self._request_uuid = request_uuid

    @property
    def bout_uuid(self) -> str:
        """Gets the bout_uuid of this MoveRequest.


        :return: The bout_uuid of this MoveRequest.
        :rtype: str
        """
        return self._bout_uuid

    @bout_uuid.setter
    def bout_uuid(self, bout_uuid: str):
        """Sets the bout_uuid of this MoveRequest.


        :param bout_uuid: The bout_uuid of this MoveRequest.
        :type bout_uuid: str
        """

        self._bout_uuid = bout_uuid

    @property
    def arena(self) -> Arena:
        """Gets the arena of this MoveRequest.


        :return: The arena of this MoveRequest.
        :rtype: Arena
        """
        return self._arena

    @arena.setter
    def arena(self, arena: Arena):
        """Sets the arena of this MoveRequest.


        :param arena: The arena of this MoveRequest.
        :type arena: Arena
        """

        self._arena = arena

    @property
    def player_competitor_map(self) -> Dict[str, Competitor]:
        """Gets the player_competitor_map of this MoveRequest.


        :return: The player_competitor_map of this MoveRequest.
        :rtype: Dict[str, Competitor]
        """
        return self._player_competitor_map

    @player_competitor_map.setter
    def player_competitor_map(self, player_competitor_map: Dict[str, Competitor]):
        """Sets the player_competitor_map of this MoveRequest.


        :param player_competitor_map: The player_competitor_map of this MoveRequest.
        :type player_competitor_map: Dict[str, Competitor]
        """

        self._player_competitor_map = player_competitor_map
